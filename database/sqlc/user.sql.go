// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO tbl_user(username,password) VALUES($1,$2)
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Username, arg.Password)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM tbl_user WHERE uid = $1
`

func (q *Queries) DeleteUser(ctx context.Context, uid int32) error {
	_, err := q.db.Exec(ctx, deleteUser, uid)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT uid, username, password, is_admin, created_at, deleted_at FROM tbl_user WHERE uid = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, uid int32) (TblUser, error) {
	row := q.db.QueryRow(ctx, getUserById, uid)
	var i TblUser
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.Password,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT uid,username,password,is_admin FROM tbl_user WHERE username = $1 AND deleted_at IS NULL LIMIT 1
`

type GetUserByUsernameRow struct {
	Uid      int32
	Username string
	Password string
	IsAdmin  pgtype.Bool
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.Password,
		&i.IsAdmin,
	)
	return i, err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE tbl_user SET deleted_at= CURRENT_TIMESTAMP WHERE uid = $1
`

func (q *Queries) SoftDeleteUser(ctx context.Context, uid int32) error {
	_, err := q.db.Exec(ctx, softDeleteUser, uid)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE tbl_user SET username = coalesce($2,username),password = coalesce($3,password) WHERE uid = $1
`

type UpdateUserParams struct {
	Uid      int32
	Username pgtype.Text
	Password pgtype.Text
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.Uid, arg.Username, arg.Password)
	return err
}
